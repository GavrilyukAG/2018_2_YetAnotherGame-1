// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package controllers

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson168ae10cDecode20182YetAnotherGamePresentationControllers(in *jlexer.Lexer, out *VKResponseData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Response":
			if in.IsNull() {
				in.Skip()
				out.Response = nil
			} else {
				in.Delim('[')
				if out.Response == nil {
					if !in.IsDelim(']') {
						out.Response = make([]struct {
							FirstName string `json:"first_name"`
							LastName  string `json:"last_name"`
							Photo     string `json:"photo_100"`
						}, 0, 1)
					} else {
						out.Response = []struct {
							FirstName string `json:"first_name"`
							LastName  string `json:"last_name"`
							Photo     string `json:"photo_100"`
						}{}
					}
				} else {
					out.Response = (out.Response)[:0]
				}
				for !in.IsDelim(']') {
					var v1 struct {
						FirstName string `json:"first_name"`
						LastName  string `json:"last_name"`
						Photo     string `json:"photo_100"`
					}
					easyjson168ae10cDecode(in, &v1)
					out.Response = append(out.Response, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson168ae10cEncode20182YetAnotherGamePresentationControllers(out *jwriter.Writer, in VKResponseData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Response\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Response == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Response {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson168ae10cEncode(out, v3)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VKResponseData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson168ae10cEncode20182YetAnotherGamePresentationControllers(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VKResponseData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson168ae10cEncode20182YetAnotherGamePresentationControllers(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VKResponseData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson168ae10cDecode20182YetAnotherGamePresentationControllers(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VKResponseData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson168ae10cDecode20182YetAnotherGamePresentationControllers(l, v)
}
func easyjson168ae10cDecode(in *jlexer.Lexer, out *struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Photo     string `json:"photo_100"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "photo_100":
			out.Photo = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson168ae10cEncode(out *jwriter.Writer, in struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Photo     string `json:"photo_100"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"first_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"last_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"photo_100\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Photo))
	}
	out.RawByte('}')
}
